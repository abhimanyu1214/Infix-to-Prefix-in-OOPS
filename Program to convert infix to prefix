Aim-Write a program in c++ to convert Infix to Prefix expression.

Algo:-
Algorithm of Infix to Prefix:-

Step 1. Push “)” onto STACK, and add “(“ to end of the A
Step 2. Scan A from right to left and repeat step 3 to 6 for each element of A until the STACK is empty
Step 3. If an operand is encountered add it to B
Step 4. If a right parenthesis is encountered push it onto STACK
Step 5. If an operator is encountered then:
	 a. Repeatedly pop from STACK and add to B each operator (on the top of STACK) which has same 
        or higher precedence than the operator.
     b. Add operator to STACK
Step 6. If left parenthesis is encontered then
	 a. Repeatedly pop from the STACK and add to B (each operator on top of stack until a left parenthesis is encounterd)
	 b. Remove the left parenthesis
Step 7. Exit


Program Code:-

#include <bits/stdc++.h> 
using namespace std; 

bool isOperator(char c) 
{ 
    return (!isalpha(c) && !isdigit(c)); 
} 

int getPriority(char C) 
{ 
    if (C == '-' || C == '+') 
        return 1; 
    else if (C == '*' || C == '/') 
        return 2; 
    else if (C == '^') 
        return 3; 
    return 0; 
} 
 
string infixToPrefix(string infix) 
{ 
    
    stack<char> operators; 
  
    
    stack<string> operands; 
  
    for (int i = 0; i < infix.length(); i++) { 
  
        if (infix[i] == '(') { 
            operators.push(infix[i]); 
        } 
  
        else if (infix[i] == ')') { 
            while (!operators.empty() &&  
                   operators.top() != '(') { 
  
                string op1 = operands.top(); 
                operands.pop(); 
  
                string op2 = operands.top(); 
                operands.pop(); 
  
                char op = operators.top(); 
                operators.pop(); 
  
                string tmp = op + op2 + op1; 
                operands.push(tmp); 
            } 
  
            operators.pop(); 
        } 
  
        else if (!isOperator(infix[i])) { 
            operands.push(string(1, infix[i])); 
        } 
  
        else { 
            while (!operators.empty() &&  
                   getPriority(infix[i]) <=  
                     getPriority(operators.top())) { 
  
                string op1 = operands.top(); 
                operands.pop(); 
  
                string op2 = operands.top(); 
                operands.pop(); 
  
                char op = operators.top(); 
                operators.pop(); 
  
                string tmp = op + op2 + op1; 
                operands.push(tmp); 
            } 
  
            operators.push(infix[i]); 
        } 
    } 
  
    while (!operators.empty()) { 
        string op1 = operands.top(); 
        operands.pop(); 
  
        string op2 = operands.top(); 
        operands.pop(); 
  
        char op = operators.top(); 
        operators.pop(); 
  
        string tmp = op + op2 + op1; 
        operands.push(tmp); 
    } 
   
    return operands.top(); 
} 
  

int main() 
{ 
    string s = "(A-B/C)*(A/K-L)"; 
    cout << infixToPrefix(s); 
    return 0; 
} 




**********************************************************************************************
Output:-

*-A/BC-/AKL

***************************************************************************************************************************

Result:-All program are executed successfully executed.
